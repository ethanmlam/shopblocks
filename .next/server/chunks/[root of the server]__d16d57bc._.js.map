{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///Users/ethanlam/Repos/shopblocks/src/app/api/products/route.ts"],"sourcesContent":["// src/api/products/route.ts\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport { NextResponse } from \"next/server\";\nimport Exa from \"exa-js\";\nimport OpenAI from \"openai\";\n\n// 1. Instantiate Exa & OpenAI clients\nconst exa = new Exa(process.env.EXA_API_KEY);\nconst openai = new OpenAI({\n  apiKey: process.env.OPENAI_API_KEY,\n});\n\nexport async function POST(request: Request) {\n  try {\n    const { items } = await request.json();\n\n    // 2. Step 1: Retrieve with Exa\n    // We'll search the web for \"best Amazon products for <items> under <budget>\"\n    // You can tweak the query, e.g. add domain filters or advanced options\n    const exaQuery = `I want Amazon products that fit the description of ${items} the best`;\n    const exaResult = await exa.searchAndContents(exaQuery, {\n      type: \"neural\",\n      useAutoprompt: true,\n      numResults: 5,  // get top 5 relevant pages\n      text: true,     // return text content\n    });\n\n    // 3. Step 2: Combine Exa results + user query, pass to OpenAI\n    // We'll instruct the LLM to produce strictly valid JSON (no code fences).\n    const systemPrompt = `\n      You are a helpful shopping assistant. \n      You have access to these search results about Amazon products. \n      Provide the top 20 product recommendations for the given item(s). \n      Make sure to include the corresponding Amazon asin (Amazon Standard Identificatioin Number) for each product.\n    `;\n    const userMessage = `\n      User wants: \"${items}\" from Amazon. The user does not want any items that do not closely match the search for \"${items}\".\n      Here are the Exa search results:\n      ${JSON.stringify(exaResult)}\n\n      Please parse through all of the items and suggest the top 7-10 products, strictly responding in valid JSON format only (no code fences, disclaimers, etc.).\n      Only respond with the corresponding asin (Amazon Standard Identification Number) for each product.\n      Example final output:\n      [\n        {\n          \"asin\": \"B07XYZ1234\",\n        },\n        ...\n      ]\n    `;\n\n    // 4. Call OpenAI Chat Completions\n    const response = await openai.chat.completions.create({\n      model: \"gpt-4o-mini\",\n      messages: [\n        { role: \"system\", content: systemPrompt },\n        { role: \"user\", content: userMessage },\n      ],\n    });\n\n    // 5. Extract the LLM's raw text\n    const rawContent = response.choices?.[0]?.message?.content || \"\";\n    // Remove code fences if any\n    const sanitized = rawContent.replace(/```(\\w+)?/g, \"\").trim();\n\n    // 6. Parse the JSON\n    let parsed;\n    try {\n      parsed = JSON.parse(sanitized);\n      // Log the parsed response for debugging\n      console.log(\"Parsed response:\", parsed);\n\n      // Ensure parsed is an array\n      if (!Array.isArray(parsed)) {\n        throw new Error(\"Parsed response is not an array\");\n      }\n    } catch (err) {\n      console.error(\"Error parsing LLM JSON:\", err);\n      return NextResponse.json({ error: \"Invalid JSON from LLM\" }, { status: 500 });\n    }\n\n    // Log the products before returning\n    console.log(\"Products to return:\", parsed);\n\n    // Extract ASINs and remove duplicates using a Set\n    const asins = Array.from(new Set(parsed.map((obj: any) => obj.asin).filter(Boolean)));\n\n    // Return the unique ASINs directly\n    return NextResponse.json(asins);\n  } catch (err: any) {\n    console.error(\"Error in /api/products route:\", err);\n    return NextResponse.json({ message: err.message }, { status: 500 });\n  }\n}\n\n"],"names":[],"mappings":"AAAA,4BAA4B;AAE5B,qDAAqD;;;AAErD;;;;;;;;;;;;;;AAIA,sCAAsC;AACtC,MAAM,MAAM,IAAI,IAAI,QAAQ,GAAG,CAAC,WAAW;AAC3C,MAAM,SAAS,IAAI,OAAO;IACxB,QAAQ,QAAQ,GAAG,CAAC,cAAc;AACpC;AAEO,eAAe,KAAK,OAAgB;IACzC,IAAI;QACF,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,QAAQ,IAAI;QAEpC,+BAA+B;QAC/B,6EAA6E;QAC7E,uEAAuE;QACvE,MAAM,WAAW,CAAC,mDAAmD,EAAE,MAAM,SAAS,CAAC;QACvF,MAAM,YAAY,MAAM,IAAI,iBAAiB,CAAC,UAAU;YACtD,MAAM;YACN,eAAe;YACf,YAAY;YACZ,MAAM;QACR;QAEA,8DAA8D;QAC9D,0EAA0E;QAC1E,MAAM,eAAe,CAAC;;;;;IAKtB,CAAC;QACD,MAAM,cAAc,CAAC;mBACN,EAAE,MAAM,0FAA0F,EAAE,MAAM;;MAEvH,EAAE,KAAK,SAAS,CAAC,WAAW;;;;;;;;;;;IAW9B,CAAC;QAED,kCAAkC;QAClC,MAAM,WAAW,MAAM,OAAO,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC;YACpD,OAAO;YACP,UAAU;gBACR;oBAAE,MAAM;oBAAU,SAAS;gBAAa;gBACxC;oBAAE,MAAM;oBAAQ,SAAS;gBAAY;aACtC;QACH;QAEA,gCAAgC;QAChC,MAAM,aAAa,SAAS,OAAO,EAAE,CAAC,EAAE,EAAE,SAAS,WAAW;QAC9D,4BAA4B;QAC5B,MAAM,YAAY,WAAW,OAAO,CAAC,cAAc,IAAI,IAAI;QAE3D,oBAAoB;QACpB,IAAI;QACJ,IAAI;YACF,SAAS,KAAK,KAAK,CAAC;YACpB,wCAAwC;YACxC,QAAQ,GAAG,CAAC,oBAAoB;YAEhC,4BAA4B;YAC5B,IAAI,CAAC,MAAM,OAAO,CAAC,SAAS;gBAC1B,MAAM,IAAI,MAAM;YAClB;QACF,EAAE,OAAO,KAAK;YACZ,QAAQ,KAAK,CAAC,2BAA2B;YACzC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAwB,GAAG;gBAAE,QAAQ;YAAI;QAC7E;QAEA,oCAAoC;QACpC,QAAQ,GAAG,CAAC,uBAAuB;QAEnC,kDAAkD;QAClD,MAAM,QAAQ,MAAM,IAAI,CAAC,IAAI,IAAI,OAAO,GAAG,CAAC,CAAC,MAAa,IAAI,IAAI,EAAE,MAAM,CAAC;QAE3E,mCAAmC;QACnC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,KAAU;QACjB,QAAQ,KAAK,CAAC,iCAAiC;QAC/C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS,IAAI,OAAO;QAAC,GAAG;YAAE,QAAQ;QAAI;IACnE;AACF","debugId":null}},
    {"offset": {"line": 170, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}