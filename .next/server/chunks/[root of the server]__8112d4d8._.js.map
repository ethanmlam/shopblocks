{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 172, "column": 0}, "map": {"version":3,"sources":["file:///Users/ethanlam/Repos/shopblocks/src/app/api/eoracle/route.ts"],"sourcesContent":["import { ethers } from 'ethers';\nimport { NextResponse } from 'next/server';\n\nconsole.log(\"test\")\nexport async function POST(request: Request) {\n    // ABI of the IEOFeedManager interface\n  const IEOFeedManagerAbi =  [\"function getLatestPriceFeed(uint16 symbol) external view returns (tuple(uint256 value, uint256 timestamp))\",\n  \"function getLatestPriceFeeds(uint16[] calldata symbols) external view returns (tuple(uint256 value, uint256 timestamp)[])\"\n];\n\n  // Address of the deployed IEOFeedManager contract on Holesky network\n  const IEOFeedManagerAddress = \"0x723BD409703EF60d6fB9F8d986eb90099A170fd0\";\n  // Connect to the Ethereum network (Holesky in this case)\n  const provider = new ethers.JsonRpcProvider('https://holesky.gateway.tenderly.co');\n\n  // Create a contract instance\n  const feedManagerContract = new ethers.Contract(IEOFeedManagerAddress, IEOFeedManagerAbi, provider);\n  try {\n    const { uint16 } = await request.json();\n \n    const priceFeed = await feedManagerContract.getLatestPriceFeed(uint16);\n\n    // Convert the price from wei to a more readable format\n    const priceInEther = (priceFeed.value / ethers.WeiPerEther).toString();\n    const timestamp = priceFeed.timestamp.toString();\n\n    console.log(`Price: ${priceInEther}, Timestamp: ${timestamp}`);\n    return NextResponse.json({ price: priceInEther, timestamp });\n  } catch (error) {\n    console.error('Error fetching price feed:', error);\n    return NextResponse.json(\n      { error: \"Failed to parse intent\" },\n      { status: 500 }\n    );\n  } \n\n  // Call the functions with example symbol(s)\n  // await getPrice(2); // For BTC:USD\n  // await getPrices([1, 2]); // Example for multiple symbols (e.g., BTC:USD and ETH:USD)\n}\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEA,QAAQ,GAAG,CAAC;AACL,eAAe,KAAK,OAAgB;IACvC,sCAAsC;IACxC,MAAM,oBAAqB;QAAC;QAC5B;KACD;IAEC,qEAAqE;IACrE,MAAM,wBAAwB;IAC9B,yDAAyD;IACzD,MAAM,WAAW,IAAI,kLAAA,CAAA,SAAM,CAAC,eAAe,CAAC;IAE5C,6BAA6B;IAC7B,MAAM,sBAAsB,IAAI,kLAAA,CAAA,SAAM,CAAC,QAAQ,CAAC,uBAAuB,mBAAmB;IAC1F,IAAI;QACF,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,QAAQ,IAAI;QAErC,MAAM,YAAY,MAAM,oBAAoB,kBAAkB,CAAC;QAE/D,uDAAuD;QACvD,MAAM,eAAe,CAAC,UAAU,KAAK,GAAG,kLAAA,CAAA,SAAM,CAAC,WAAW,EAAE,QAAQ;QACpE,MAAM,YAAY,UAAU,SAAS,CAAC,QAAQ;QAE9C,QAAQ,GAAG,CAAC,CAAC,OAAO,EAAE,aAAa,aAAa,EAAE,WAAW;QAC7D,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;YAAc;QAAU;IAC5D,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,8BAA8B;QAC5C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAyB,GAClC;YAAE,QAAQ;QAAI;IAElB;AAEA,4CAA4C;AAC5C,oCAAoC;AACpC,uFAAuF;AACzF","debugId":null}},
    {"offset": {"line": 215, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}