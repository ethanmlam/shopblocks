{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///Users/ethanlam/Repos/shopblocks/src/app/api/rye-list/route.ts"],"sourcesContent":["// src/api/rye-list/route.ts\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport { NextResponse } from \"next/server\";\nimport { GraphQLClient, gql } from \"graphql-request\";\n\n// This is the staging endpoint for Rye GraphQL\nconst RYE_GRAPHQL_ENDPOINT = \"https://staging.graphql.api.rye.com/v1/query\";\n\n// We create a GraphQLClient. By default, we pass Basic auth in headers.\n// If you need a JWT for read ops, you can replace or augment these headers below.\nconst client = new GraphQLClient(RYE_GRAPHQL_ENDPOINT, {\n  headers: {\n    Authorization: \"Basic UllFL3N0YWdpbmctMjhiMjZlMGI2YTIwNDBmM2JiNTU6\",\n    \"Rye-Shopper-IP\": \"136.25.178.75\",\n  },\n});\n\n// We define a Product interface to match the full GraphQL structure\ninterface Product {\n  id: string;\n  title: string;\n  marketplace: string;\n  description: string;\n  vendor: string;\n  url: string;\n  isAvailable: boolean;\n  images: { url: string }[];\n  price: {\n    currency: string;\n    displayValue: string;\n    value: number;\n  };\n  // Fields specific to Amazon products\n  ASIN?: string;\n  featureBullets?: string[];\n  ratingsTotal?: number;\n  reviewsTotal?: number;\n  specifications?: { name: string; value: string }[];\n}\n\n\n// A simplified function to fetch product details\nasync function fetchProduct(asin: string) {\n  const query = gql`\n    query DemoAmazonProductFetch($input: ProductByIDInput!) {\n      product: productByID(input: $input) {\n        title\n        vendor\n        url\n        isAvailable\n        images {\n          url\n        }\n        price {\n          displayValue\n        }\n        ... on AmazonProduct {\n          ASIN\n        }\n      }\n    }\n  `;\n\n  const variables = {\n    input: {\n      id: asin,\n      marketplace: 'AMAZON',\n    },\n  };\n\n  const data = await client.request<{ product: Product }>(query, variables);\n  console.log(JSON.stringify(data, undefined, 2));\n  return data.product; // Return the product directly\n}\n\n/**\n * This route expects a JSON body like:\n * {\n *   \"asins\": [\"B07ABC1234\", \"B07XYZ5678\", ...]\n * }\n * and returns an array of Product objects for each valid ASIN.\n */\nexport async function POST(request: Request) {\n  try {\n    // 1. Parse the incoming JSON body\n    const { asins } = await request.json();\n\n    // 2. Validate the input is an array\n    if (!Array.isArray(asins)) {\n      throw new Error(\"Invalid 'asins' parameter. Must be an array of strings.\");\n    }\n\n    // 3. For each ASIN, fetch product details from Rye\n    const productDetails = await Promise.all(\n      asins.map(async (asin: string) => {\n        try {\n          const product = await fetchProduct(asin); // Call the new fetchProduct function\n\n          // If product is null or undefined, we return null for this ASIN\n          if (!product) {\n            console.warn(`ASIN ${asin} returned no product data`);\n            return null;\n          }\n\n          // Otherwise, we return the product object\n          return product;\n        } catch (error) {\n          console.error(`Error fetching ASIN ${asin}:`, error);\n          // Return null so we can skip this item\n          return null;\n        }\n      })\n    );\n\n    // 4. Filter out null results and return the rest\n    const validProducts = productDetails.filter((p) => p !== null);\n\n    // 5. Return the final array of product objects\n    return NextResponse.json(validProducts);\n  } catch (err: any) {\n    console.error(\"Error in /api/rye-list route:\", err);\n    return NextResponse.json({ message: err.message }, { status: 500 });\n  }\n}\n"],"names":[],"mappings":"AAAA,4BAA4B;AAE5B,qDAAqD;;;AAErD;AACA;AAAA;AAAA;;;AAEA,+CAA+C;AAC/C,MAAM,uBAAuB;AAE7B,wEAAwE;AACxE,kFAAkF;AAClF,MAAM,SAAS,IAAI,mLAAA,CAAA,gBAAa,CAAC,sBAAsB;IACrD,SAAS;QACP,eAAe;QACf,kBAAkB;IACpB;AACF;AA0BA,iDAAiD;AACjD,eAAe,aAAa,IAAY;IACtC,MAAM,QAAQ,2KAAA,CAAA,MAAG,CAAC;;;;;;;;;;;;;;;;;;EAkBlB,CAAC;IAED,MAAM,YAAY;QAChB,OAAO;YACL,IAAI;YACJ,aAAa;QACf;IACF;IAEA,MAAM,OAAO,MAAM,OAAO,OAAO,CAAuB,OAAO;IAC/D,QAAQ,GAAG,CAAC,KAAK,SAAS,CAAC,MAAM,WAAW;IAC5C,OAAO,KAAK,OAAO,EAAE,8BAA8B;AACrD;AASO,eAAe,KAAK,OAAgB;IACzC,IAAI;QACF,kCAAkC;QAClC,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,QAAQ,IAAI;QAEpC,oCAAoC;QACpC,IAAI,CAAC,MAAM,OAAO,CAAC,QAAQ;YACzB,MAAM,IAAI,MAAM;QAClB;QAEA,mDAAmD;QACnD,MAAM,iBAAiB,MAAM,QAAQ,GAAG,CACtC,MAAM,GAAG,CAAC,OAAO;YACf,IAAI;gBACF,MAAM,UAAU,MAAM,aAAa,OAAO,qCAAqC;gBAE/E,gEAAgE;gBAChE,IAAI,CAAC,SAAS;oBACZ,QAAQ,IAAI,CAAC,CAAC,KAAK,EAAE,KAAK,yBAAyB,CAAC;oBACpD,OAAO;gBACT;gBAEA,0CAA0C;gBAC1C,OAAO;YACT,EAAE,OAAO,OAAO;gBACd,QAAQ,KAAK,CAAC,CAAC,oBAAoB,EAAE,KAAK,CAAC,CAAC,EAAE;gBAC9C,uCAAuC;gBACvC,OAAO;YACT;QACF;QAGF,iDAAiD;QACjD,MAAM,gBAAgB,eAAe,MAAM,CAAC,CAAC,IAAM,MAAM;QAEzD,+CAA+C;QAC/C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,KAAU;QACjB,QAAQ,KAAK,CAAC,iCAAiC;QAC/C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS,IAAI,OAAO;QAAC,GAAG;YAAE,QAAQ;QAAI;IACnE;AACF","debugId":null}},
    {"offset": {"line": 149, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}